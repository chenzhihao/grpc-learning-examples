// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProductRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductRequest) Reset()         { *m = ProductRequest{} }
func (m *ProductRequest) String() string { return proto.CompactTextString(m) }
func (*ProductRequest) ProtoMessage()    {}
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_b6d2e5f03dc71c7d, []int{0}
}
func (m *ProductRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductRequest.Unmarshal(m, b)
}
func (m *ProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductRequest.Marshal(b, m, deterministic)
}
func (dst *ProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductRequest.Merge(dst, src)
}
func (m *ProductRequest) XXX_Size() int {
	return xxx_messageInfo_ProductRequest.Size(m)
}
func (m *ProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProductRequest proto.InternalMessageInfo

func (m *ProductRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ProductListRequest struct {
	Id                   []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductListRequest) Reset()         { *m = ProductListRequest{} }
func (m *ProductListRequest) String() string { return proto.CompactTextString(m) }
func (*ProductListRequest) ProtoMessage()    {}
func (*ProductListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_b6d2e5f03dc71c7d, []int{1}
}
func (m *ProductListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductListRequest.Unmarshal(m, b)
}
func (m *ProductListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductListRequest.Marshal(b, m, deterministic)
}
func (dst *ProductListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductListRequest.Merge(dst, src)
}
func (m *ProductListRequest) XXX_Size() int {
	return xxx_messageInfo_ProductListRequest.Size(m)
}
func (m *ProductListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProductListRequest proto.InternalMessageInfo

func (m *ProductListRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

type ProductReply struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price                float64  `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductReply) Reset()         { *m = ProductReply{} }
func (m *ProductReply) String() string { return proto.CompactTextString(m) }
func (*ProductReply) ProtoMessage()    {}
func (*ProductReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_b6d2e5f03dc71c7d, []int{2}
}
func (m *ProductReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductReply.Unmarshal(m, b)
}
func (m *ProductReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductReply.Marshal(b, m, deterministic)
}
func (dst *ProductReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductReply.Merge(dst, src)
}
func (m *ProductReply) XXX_Size() int {
	return xxx_messageInfo_ProductReply.Size(m)
}
func (m *ProductReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProductReply proto.InternalMessageInfo

func (m *ProductReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductReply) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type Message struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_b6d2e5f03dc71c7d, []int{3}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ProductRequest)(nil), "pb.ProductRequest")
	proto.RegisterType((*ProductListRequest)(nil), "pb.ProductListRequest")
	proto.RegisterType((*ProductReply)(nil), "pb.ProductReply")
	proto.RegisterType((*Message)(nil), "pb.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductClient interface {
	GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductReply, error)
	GetProductStream(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (Product_GetProductStreamClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (Product_ChatClient, error)
}

type productClient struct {
	cc *grpc.ClientConn
}

func NewProductClient(cc *grpc.ClientConn) ProductClient {
	return &productClient{cc}
}

func (c *productClient) GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductReply, error) {
	out := new(ProductReply)
	err := c.cc.Invoke(ctx, "/pb.Product/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetProductStream(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (Product_GetProductStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Product_serviceDesc.Streams[0], "/pb.Product/GetProductStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &productGetProductStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Product_GetProductStreamClient interface {
	Recv() (*ProductReply, error)
	grpc.ClientStream
}

type productGetProductStreamClient struct {
	grpc.ClientStream
}

func (x *productGetProductStreamClient) Recv() (*ProductReply, error) {
	m := new(ProductReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Product_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Product_serviceDesc.Streams[1], "/pb.Product/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &productChatClient{stream}
	return x, nil
}

type Product_ChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type productChatClient struct {
	grpc.ClientStream
}

func (x *productChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServer is the server API for Product service.
type ProductServer interface {
	GetProduct(context.Context, *ProductRequest) (*ProductReply, error)
	GetProductStream(*ProductListRequest, Product_GetProductStreamServer) error
	Chat(Product_ChatServer) error
}

func RegisterProductServer(s *grpc.Server, srv ProductServer) {
	s.RegisterService(&_Product_serviceDesc, srv)
}

func _Product_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Product/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetProductStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServer).GetProductStream(m, &productGetProductStreamServer{stream})
}

type Product_GetProductStreamServer interface {
	Send(*ProductReply) error
	grpc.ServerStream
}

type productGetProductStreamServer struct {
	grpc.ServerStream
}

func (x *productGetProductStreamServer) Send(m *ProductReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Product_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductServer).Chat(&productChatServer{stream})
}

type Product_ChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type productChatServer struct {
	grpc.ServerStream
}

func (x *productChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Product_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _Product_GetProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProductStream",
			Handler:       _Product_GetProductStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Product_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_b6d2e5f03dc71c7d) }

var fileDescriptor_service_b6d2e5f03dc71c7d = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x77, 0xe2, 0x6a, 0x71, 0xd4, 0x65, 0x19, 0x44, 0xca, 0x9e, 0x4a, 0x14, 0xe9, 0xa9,
	0x2c, 0xea, 0xc1, 0xa3, 0xe0, 0xc1, 0x8b, 0x82, 0xd4, 0x27, 0x48, 0xdb, 0x41, 0x03, 0x5b, 0x1b,
	0x93, 0xac, 0xd0, 0x47, 0xf2, 0x2d, 0xc5, 0x36, 0xd5, 0x16, 0xf7, 0x36, 0x5f, 0xf2, 0xfd, 0x3f,
	0x99, 0xe0, 0x89, 0x63, 0xfb, 0xa9, 0x4b, 0xce, 0x8c, 0x6d, 0x7c, 0x43, 0xc2, 0x14, 0x32, 0xc1,
	0xc5, 0xb3, 0x6d, 0xaa, 0x6d, 0xe9, 0x73, 0xfe, 0xd8, 0xb2, 0xf3, 0xb4, 0x40, 0xa1, 0xab, 0x18,
	0x12, 0x48, 0x0f, 0x73, 0xa1, 0x2b, 0x79, 0x81, 0x14, 0x8c, 0x47, 0xed, 0xfe, 0x59, 0x7b, 0xc1,
	0xba, 0xc5, 0xe3, 0xdf, 0x1e, 0xb3, 0x69, 0x89, 0x70, 0xfe, 0xae, 0x6a, 0x0e, 0x3d, 0xdd, 0x4c,
	0xa7, 0xb8, 0x6f, 0xac, 0x2e, 0x39, 0x16, 0x09, 0xa4, 0x90, 0xf7, 0x20, 0xcf, 0x31, 0x7a, 0x62,
	0xe7, 0xd4, 0x2b, 0x53, 0x8c, 0x51, 0xdd, 0x8f, 0x21, 0x37, 0xe0, 0xd5, 0x17, 0x60, 0x14, 0xfa,
	0xe9, 0x06, 0xf1, 0x81, 0xfd, 0x40, 0x94, 0x99, 0x22, 0x9b, 0xae, 0xb0, 0x5a, 0x4e, 0xce, 0xcc,
	0xa6, 0x95, 0x33, 0xba, 0xc3, 0xe5, 0x5f, 0xea, 0xc5, 0x5b, 0x56, 0x35, 0x9d, 0x8d, 0xbc, 0xd1,
	0x72, 0xbb, 0xf2, 0x6b, 0xa0, 0x4b, 0x9c, 0xdf, 0xbf, 0x29, 0x4f, 0x47, 0x3f, 0xb7, 0xe1, 0xc9,
	0xab, 0x31, 0xc8, 0x59, 0x0a, 0x6b, 0x28, 0x0e, 0xba, 0xdf, 0xbd, 0xfe, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x9e, 0xcf, 0x46, 0xbb, 0x6e, 0x01, 0x00, 0x00,
}
